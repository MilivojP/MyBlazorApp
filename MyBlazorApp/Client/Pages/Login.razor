@page "/login"
@using MyBlazorApp.Shared.Models
@using System.Net
@inject HttpClient Http

@inject NavigationManager NavigationManager

<h1>Login</h1>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" Class="form-control" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" Class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>

@code {

    private UserDto loginModel = new UserDto();
    
    private bool ShowErrors;
    private string Error = "";

    private async Task HandleLogin()
    {
        ShowErrors = false;

        //var result = await AuthService.Login(loginModel);
        var result = await Http.PostAsJsonAsync("api/Auth/Login", loginModel);
        var content = await result.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();

        if (result!=null)
        {
            NavigationManager.NavigateTo("/");
            
        }
        else
        {
           // Error = result.StatusCode(KeyNotFoundException);
            ShowErrors = true;
        }
    }
    
    //    protected async Task SaveUser()
    //{
    //    customValidation?.ClearErrors();

    //    var response = await Http.PostAsJsonAsync("api/User", user);

    //    var content = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();

    //    if (response.StatusCode == HttpStatusCode.BadRequest && content.Any())
    //    {
    //        customValidation?.DisplayErrors(content);
    //    }
    //    else
    //    {
    //        Cancel();
    //    }
    //}
}