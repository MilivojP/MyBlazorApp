@page "/login"
@using MyBlazorApp.Shared.Auth
@using MyBlazorApp.Shared.Models
@using MyBlazorApp.Client.Validation
@using System.Net
@inject HttpClient Http
@inject IJSRuntime js
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider

<h1>Login</h1>

<EditForm Model="loginRequest" OnValidSubmit="OnValidSubmit" style="max-width:500px;">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-2">
        <InputText class="form-control" @bind-Value="loginRequest.Email" placeholder="Enter Email" />
        <ValidationMessage For="@(() => loginRequest.Email)" />
    </div>
    <div class="mb-2">
        <InputText type="password" Class="form-control" @bind-Value="loginRequest.Password" placeholder="Enter Password" />
        <ValidationMessage For="@(() => loginRequest.Password)" />
    </div>
     <button class="btn btn-secondary" disabled="@isDisabled">LogIn</button>
</EditForm>

@code {
    private LoginDto loginRequest = new LoginDto();
    bool isDisabled = false;

    private async Task OnValidSubmit()
    {
        isDisabled = true;

        var response = await Http.PostAsJsonAsync<LoginDto>("/api/Auth/login", loginRequest);

        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadFromJsonAsync<Token>();
            isDisabled = false;

            var authProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await authProvider.UpdateAuthenticationState(token);

            NavigationManager.NavigateTo("/", true);       
        }
        else if (response.StatusCode == HttpStatusCode.Unauthorized)
        {
            await js.InvokeVoidAsync("alert", "Invalid user name or password!");
            return;
        }
    }
}