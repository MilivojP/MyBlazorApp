@page "/projectlist"
@using MyBlazorApp.Shared.Models
@using System.Security.Claims
@inject HttpClient Http
@inject AuthenticationStateProvider authStateProvider
@attribute [Authorize(Roles = "Administrator")]

<h1>Project</h1>
<p></p>
<div class="row">
    <div class="col-md-6">
        <a href='/project/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Project
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search by ID"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterID" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>

<br />

@if (projectList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>Id</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Project in projectList)
            {
                <tr>
                    <td>@Project.Id</td>
                    <td>@Project.Name </td>
                    <td>
                        <a href='/project/edit/@Project.Id' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/project/delete/@Project.Id' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}

@code {
    protected List<ProjectDto> projectList = new();
    protected List<ProjectDto> searchID = new();
    protected string SearchString { get; set; }= string.Empty;

    private int UserId;

    protected override async Task OnInitializedAsync()
    {
        await GetUserData();
    }
    protected async Task GetUserData()
    {

        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;


        if (user.Identity.IsAuthenticated)
        {
            var x = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

            UserId = int.Parse(x);
            projectList = await Http.GetFromJsonAsync<List<ProjectDto>>("api/project");
        }
     
    }

    protected void FilterID()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            projectList = searchID
                .Where(w => w.Name.ToString() == SearchString)
                .ToList();
        }
        else
        {
            projectList = searchID;
        }
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        projectList = searchID;
    }

}
