@page "/user/add"
@using MyBlazorApp.Client.Validation
@using MyBlazorApp.Shared.Models
@using System.Net
@inject HttpClient Http
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Administrator")]

<h1>Add User</h1>
<hr />
<EditForm Model="@user" OnValidSubmit="SaveUser">
    <DataAnnotationsValidator />
    <CustomValidation @ref="customValidation" />
    <ValidationSummary/>
    <div class="mb-3">
        <label for="Name" class="form-label">Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.UserName" />
        </div>
        <ValidationMessage For="@(() => user.UserName)" />
    </div>
    <div class="mb-3">
        <label for="Password" class="form-label">Password</label>
        <div class="col-md-4">
            <InputText type="password" placeholder="Password" @bind-Value="user.Password" />
        </div>
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <div class="mb-3">
        <label for="ConfirmPassword" class="form-label">ConfirmPassword</label>
        <div class="col-md-4">
            <InputText type="password" placeholder="ConfirmPassword" @bind-Value="user.ConfirmPassword" />
        </div>
        <ValidationMessage For="@(() => user.ConfirmPassword)" />
    </div>
    <div class="mb-3">
        <label for="Emailid" class="form-label">E-mail</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.Email" />
        </div>
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="mb-3">
        <label for="IsAdmin" class="form-label">IsAdmin</label>
        <div class="col-md-4">
            <input type="checkbox" @bind="user.IsAdmin">
                <option value="true"></option>
                <option value="false"></option>
            </input>
        </div>
        <ValidationMessage For="@(() => user.IsAdmin)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    protected NewUserDto user = new();
    private CustomValidation? customValidation;

    protected async Task SaveUser()
    {
        customValidation?.ClearErrors();

        var response = await Http.PostAsJsonAsync("api/User", user);

        var content = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();

        if (response.StatusCode == HttpStatusCode.BadRequest && content.Any())
        {
            customValidation?.DisplayErrors(content);
        }
        else
        {
            Cancel();
        }
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/userlist");
    }
}

