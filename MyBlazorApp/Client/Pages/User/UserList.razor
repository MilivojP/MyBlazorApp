@page "/userlist"
@using MyBlazorApp.Shared.Models
@using System.Net.Http.Headers

@inject HttpClient Http
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

@attribute [Authorize(Roles = "Administrator,User")]

<h1>Users</h1>
<p></p>
<div class="row">
    <div class="col-md-6">
        <a href='/user/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add User
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search user by name"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />
@if (userList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>User Name</th>
                <th>Email</th>
                <th>IsAdmin</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in userList)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>@user.IsAdmin</td>
                    <td>
                        <a href='/user/edit/@user.Id' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/user/delete/@user.Id' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}

@code {
    protected List<UserDto> userList = new();
    protected List<UserDto> searchUserData = new();
    protected string SearchString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await authProvider.GetToken();
        if (!string.IsNullOrWhiteSpace(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
            await GetAllUsers();
        }
        else
        {
            navManager.NavigateTo("/login");
        }
    }

    protected async Task GetAllUsers()
    {
        userList = await Http.GetFromJsonAsync<List<UserDto>>("api/User");
        searchUserData = userList;
    }

    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            userList = searchUserData
                .Where(u => u.UserName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            userList = searchUserData;
        }
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        userList = searchUserData;
    }

}

