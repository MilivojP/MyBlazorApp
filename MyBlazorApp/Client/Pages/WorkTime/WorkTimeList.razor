@page "/worktimelist"
@using MyBlazorApp.Shared.Models
@using System.Security.Claims
@inject HttpClient Http
@inject AuthenticationStateProvider authStateProvider
@attribute [Authorize(Roles = "Administrator,User")]

<h1>Work Time</h1>
<p></p>
<div class="row">
    <div class="col-md-6">
        <a href='/worktime/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Work Time
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search by day"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterDay" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>

<br />

@if (workList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>Day</th>
                <th>StartTime</th>
                <th>EndTime</th>
                <th>Work</th>
                <th>BreakTime</th>
                <th>TotalWork</th>
                <th>Notes</th>
                <th>UserId</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var WorkTime in workList)
            {
                <tr>
                    <td>@WorkTime.Day.ToString("d",System.Globalization.CultureInfo.GetCultureInfo("en-GB")) </td>
                    <td>@WorkTime.StartTime.ToShortTimeString()</td>
                    <td>@WorkTime.EndTime.ToShortTimeString()</td>
                    <td>@WorkTime.EndTime.Subtract(@WorkTime.StartTime)</td>
                    <td>@WorkTime.BreakTime</td>
                    <td>@TimeSpan.FromMinutes(@WorkTime.TotalWork)</td>               
                    <td>@WorkTime.Notes</td>
                    <td>@WorkTime.UserId</td>
                    <td>
                        <a href='/worktime/edit/@WorkTime.Id' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/worktime/delete/@WorkTime.Id' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>

    </table>

    <table class="table align-right table-bordered">
        <thead class="table-active">
            <tr>
                <th>Day</th>
                <th>Project</th>
                <th>TimeSpent</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var projectTime in projectTimeList)
            {
                <tr>
                   <td>@projectTime.Day</td>
                   <td>@projectTime.ProjectId</td>
                   <td>@projectTime.TimeSpent</td>
                   <td>
                        <a href='/projecttime/add/@projectTime.Id' class="btn btn-outline-success" role="button">
                            Add
                        </a>
                        <a href='/projecttime/delete/@projectTime.Id' class="btn btn-outline-warning" role="button">
                            Delete
                        </a>
                   </td>
                </tr>

            }
        </tbody>

    </table>
}


@code {
    protected List<WorkTimeDto> workList = new();
    protected List<WorkTimeDto> searchDay = new();
    protected string SearchString { get; set; }= string.Empty;

    private int UserId;

    protected override async Task OnInitializedAsync()
    {
        await GetUserData();
    }
    protected async Task GetUserData()
    {

        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;


        if (user.Identity.IsAuthenticated)
        {
            var x = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

            UserId = int.Parse(x);
            workList = await Http.GetFromJsonAsync<List<WorkTimeDto>>("api/worktime" );
        }

    }

    protected void FilterDay()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            workList = searchDay
                .Where(w => w.Day.ToShortDateString() == SearchString)
                .ToList();
        }
        else
        {
            workList = searchDay;
        }
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        workList = searchDay;
    }
    protected List<ProjectTimeDto> projectTimeList = new();
}
