@page "/fetchworktime"
@using MyBlazorApp.Shared.Models
@inject HttpClient Http

<h1>WorkTime</h1>
<p>My Work operation</p>
<div class="row">
    <div class="col-md-6">
        <a href='/WorkTime/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            AddWorkTime
        </a>
    </div>
</div>

@if (workList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>UserId</th>
                <th>UserName</th>
                <th>StartTime</th>
                <th>EndTime</th>
                <th>Work</th>
                <th>BreakTime</th>
                <th>Notes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var WorkTime in workList)
            {
                <tr>
                    <td>@WorkTime.UserId</td>
                    <td>@WorkTime.UserName</td>
                    <td>@WorkTime.StartTime</td>
                    <td>@WorkTime.EndTime</td>
                    <td>@WorkTime.Work=@WorkTime.EndTime-@WorkTime.StartTime</td>
                    <td>@WorkTime.BreakTime</td>
                    <td>@WorkTime.Notes</td>
                    <td>
                        <a href='/worktime/edit/@WorkTime.UserId' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/worktime/delete/@WorkTime.UserId' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}

@code {
    protected List<WorkTime> workList = new();
    protected List<WorkTime> searchUserData = new();
    protected WorkTime work = new();
    protected string SearchString { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await GetUser();
    }
    protected async Task GetUser()
    {
        workList = await Http.GetFromJsonAsync<List<WorkTime>>("api/Work");
        searchUserData = workList;
    }
    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            workList = searchUserData
                .Where(w => w.UserName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            workList = searchUserData;
        }
    }
    protected void DeleteConfirm(int Id)
    {
        work = workList.FirstOrDefault(x => x.UserId == Id);
    }
    public void ResetSearch()
    {
        SearchString = string.Empty;
        workList = searchUserData;
    }

}
